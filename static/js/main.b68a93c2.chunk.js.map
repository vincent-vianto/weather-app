{"version":3,"sources":["components/SearchCity/SearchCity.js","components/CurrentWeather/CurrentWeather.js","components/Forecast/Forecast.js","components/index/Index.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","props","Form","onSubmit","handleSubmit","InputGroup","FormControl","type","placeholder","value","query","onChange","handleChange","className","Append","Button","variant","CurrentWeather","name","description","icon","temp","clouds","humidity","wind","src","alt","Math","round","Forecast","forecast","map","item","index","key","time","dateNow","dayjs","Date","now","dateDt","diff","format","dayPicker","dt","weather","main","Index","useState","loading","setLoading","error","setError","setWeather","setQuery","search","setSearch","data","setData","errorMessage","setErrorMessage","useEffect","apiKey","process","a","Axios","current","sys","country","all","speed","list","response","fetchData","style","animation","easings","easeInOutCubic","Container","event","target","preventDefault","height","width","cod","message","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b68a93c2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, FormControl, Button, InputGroup } from \"react-bootstrap\";\nimport \"./style.css\"\n\nconst SearchCity = (props) => {\n  return (\n    <div>\n      <Form onSubmit={props.handleSubmit}>\n        <InputGroup>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search city's weather here\"\n            value={props.query}\n            onChange={props.handleChange}\n            className=\"bg-transparent text-light formSearchBox\"\n          />\n          <InputGroup.Append>\n            <Button variant=\"transparent\" className=\"text-light formButton\" type=\"submit\">\n              Search\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchCity;\n","import React from \"react\";\nimport \"./style.css\"\n\n\nconst CurrentWeather = (props) => {\n  const { name, description, icon, temp, clouds, humidity, wind } = props;\n\n  return (\n    <div className=\"currentBlock\">\n      <h3>{description}</h3>\n      <h2>{name}</h2>\n      <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt={icon}/>\n      <h2>{Math.round(temp)}&deg;C</h2>\n      <h5>Cloudiness : {clouds} %</h5>\n      <h5>Humidity : {humidity} %</h5>\n      <h5>winds : {Math.round(wind)} m/s</h5>\n    </div>\n  );\n};\n\nexport default CurrentWeather;\n","import React from \"react\";\nimport \"./style.css\";\nimport dayjs from \"dayjs\";\n\nconst Forecast = (props) => {\n  const forecast = props.forecast;\n\n  const dayPicker = (time) => {\n    const dateNow = dayjs(Date.now());\n    const dateDt = dayjs(time);\n    let dayDiff =\n      dateNow.diff(dateDt, \"day\") === 0\n        ? \"Today\"\n        : dateNow.diff(dateDt, \"day\") === -1\n        ? \"Tomorrow\"\n        : dateDt.format(\"D MMM\");\n    return dayDiff;\n  };\n\n  return (\n    <div className=\"forecastWrapper\">\n      {forecast &&\n        forecast.map((item, index) => (\n          <div className=\"forecastBlock\" key={index}>\n            <h6>{dayPicker(item.dt * 1000)}</h6>\n            <h6>{dayjs(item.dt * 1000).format(\"h:mm A\")}</h6>\n            <img\n              src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`}\n              alt={item.weather[0].icon}\n            />\n            <h6>{Math.round(item.main.temp)}&deg;C</h6>\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default Forecast;\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { easings } from \"react-animation\";\nimport ReactLoading from \"react-loading\";\n\nimport SearchCity from \"../SearchCity/SearchCity\";\nimport CurrentWeather from \"../CurrentWeather/CurrentWeather\";\nimport Forecast from \"../Forecast/Forecast\";\nimport \"./style.css\";\nimport { Container } from \"react-bootstrap\";\n\nconst Index = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [weather, setWeather] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [search, setSearch] = useState(\"Jakarta\");\n  const [data, setData] = useState({});\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const handleChange = (event) => setQuery(event.target.value);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSearch(query);\n    setQuery(\"\");\n  };\n\n  useEffect(() => {\n    const apiKey = process.env.REACT_APP_API_KEY;\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const current = await Axios(\n          `https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=${apiKey}&units=metric`\n        );\n        const forecast = await Axios(\n          `https://api.openweathermap.org/data/2.5/forecast?q=${search}&appid=${apiKey}&units=metric`\n        );\n        setLoading(false);\n        setData({\n          name: current.data.name + \", \" + current.data.sys.country,\n          description: current.data.weather[0].description,\n          main: current.data.weather[0].main,\n          icon: current.data.weather[0].icon,\n          temp: current.data.main.temp,\n          clouds: current.data.clouds.all,\n          humidity: current.data.main.humidity,\n          wind: current.data.wind.speed,\n          forecast: forecast.data.list,\n        });\n        setWeather(true);\n        setError(false);\n      } catch (error) {\n        setLoading(false);\n        setErrorMessage(error.response.data);\n        setWeather(false);\n        setError(true);\n      }\n    };\n    if (search !== \"\") {\n      fetchData();\n    }\n  }, [search]);\n\n  const style = {\n    animation: `fade-in ${easings.easeInOutCubic} 2000ms forwards`,\n  };\n\n  return (\n    <div className=\"App\">\n      <Container className=\"mt-4\">\n        <SearchCity\n          query={query}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n        />\n        {loading && (\n          <div className=\"loaderWrapper\">\n            <ReactLoading type=\"spinningBubbles\" height={150} width={150} />\n            <div className=\"mt-5 d-inline-flex flex-row\">\n              <h3>Loading</h3>\n              <ReactLoading\n                type=\"balls\"\n                height={25}\n                width={25}\n                className=\"align-self-end\"\n              />\n            </div>\n          </div>\n        )}\n        {!loading && weather && (\n          <div className=\"mt-3\" style={style}>\n            <CurrentWeather {...data} />\n            <Forecast forecast={data.forecast} />\n          </div>\n        )}\n        {!loading && error && (\n          <div style={style}>\n            <div className=\"errorWrapper\">\n              <h1>{errorMessage.cod}</h1>\n              <h2>{errorMessage.message}</h2>\n            </div>\n          </div>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport Index from \"./components/index/Index\";\n\nfunction App() {\n  return (\n   <Index/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}